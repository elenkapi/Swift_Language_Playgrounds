import UIKit

/* ·É®·Éî·É•·Éõ·Éî·Éú·Éò·Éó ·Éô·Éö·Éê·É°·Éò Car üöó, ·É†·Éù·Éõ·Éî·Éö·É°·Éê·É™ ·Éî·É•·Éú·Éî·Éë·Éê ·É®·Éî·Éõ·Éì·Éî·Éí·Éò ·Éó·Éï·Éò·É°·Éî·Éë·Éî·Éë·Éò:
 - ·Éë·É†·Éî·Éú·Éì·Éò
 - ·É§·Éî·É†·Éò
 - ·Éô·Éê·É†·Éî·Éë·Éî·Éë·Éò·É° ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê
 - ·É°·Éê·É¨·Éï·Éê·Éï·Éò·É° ·Éê·Éï·Éñ·Éò·É° ·Éõ·Éù·É™·É£·Éö·Éù·Éë·Éê ·Éì·Éê ·É°·Éê·É¨·Éï·Éê·Éï·Éò·É° ·É°·Éê·É≠·Éò·É†·Éù ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê 100 ·Éô·Éõ-·Éñ·Éî (FuelExpenses)
 ·É°·Éê·É¨·Éï·Éê·Éï·Éò·É° ·Éê·Éï·Éñ·Éò·É° ·Éõ·Éù·É™·É£·Éö·Éù·Éë·Éê ·Éì·Éê ·É°·Éê·É¨·Éï·Éê·Éï·Éò·É° ·É°·Éê·É≠·Éò·É†·Éù ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éó·Éï·Éò·É° ·É®·Éî·É•·Éõ·Éî·Éú·Éò ·É°·É¢·É†·É£·É•·É¢·É£·É†·Éê FuelExpenses, ·É†·Éù·Éõ·Éî·Éö·É®·Éò·É™ ·É®·Éî·Éò·Éú·Éê·ÉÆ·Éê·Éï·Éê·Éó ·Éê·É¶·Éú·Éò·É®·Éú·É£·Éö ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éë·Éî·Éë·É°.
 ·Éë·É†·Éî·Éú·Éì·Éò·É°·Éó·Éï·Éò·É° ·É®·Éî·Éõ·Éù·Éò·É¢·Éê·Éú·Éî ·Éî·Éú·Éê·Éõ·Éò, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ 5 ·Éí·Éê·Éú·É°·ÉÆ·Éï·Éê·Éï·Éî·Éë·É£·Éö ·Éõ·Éù·Éì·Éî·Éö·É° ·Éê·É¶·É¨·Éî·É†·É°. ·Éê·É•·Éï·É° 5 ·É•·Éî·Éò·É°·Éò.
 ·É®·Éî·É•·Éõ·Éî·Éú·Éò·Éó ·Éõ·Éê·É°·Éò·Éï·Éò, ·É†·Éù·Éõ·Éî·Éö·É°·Éê·É™ ·É®·Éî·Éê·Éï·É°·Éî·Éë 15 Car-·Éò·Éó. (·É†·Éù·Éí·Éù·É†·É™ ·Éí·Éê·Éí·Éò·ÉÆ·Éê·É†·Éì·Éî·Éë·Éê·Éó ·Éò·É°·Éî ·É®·Éî·Éê·Éï·É°·Éî·Éó)
 */

class Car {
    var brand: Brand
    var color: Color
    var numberOfDoors: Int
    var fuel: FuelExpenses
    
    init(brand: Brand, color: Color, numberOfDoors: Int, fuel: FuelExpenses) {
        self.brand = brand
        self.color = color
        self.numberOfDoors = numberOfDoors
        self.fuel = fuel
    }
    
    func toString() -> String {
        return "Brand: \(self.brand), Color: \(self.color), Number of doors: \(self.numberOfDoors), Fuel consumption per 100 km: \(self.fuel.fuelConsumptionPer100Km) "
    }
}

struct FuelExpenses {
    var fuelCapacity: Double
    var fuelConsumptionPer100Km: Double
}

enum Brand: String, CaseIterable {
    case Toyota
    case Hyundai
    case MercedesBenz
    case BMW
    case Chevrolet
}

enum Color: String, CaseIterable {
    case Black
    case White
    case Red
    case Silver
}

var carsArray = [
    Car(brand: .BMW, color: .Black, numberOfDoors: 4, fuel: .init(fuelCapacity: 80, fuelConsumptionPer100Km: 15)),
    Car(brand: .BMW, color: .White, numberOfDoors: 4, fuel: .init(fuelCapacity: 97.5, fuelConsumptionPer100Km: 10.9)),
    Car(brand: .Hyundai, color: .Red, numberOfDoors: 2, fuel: .init(fuelCapacity: 100, fuelConsumptionPer100Km: 7.8)),
    Car(brand: .Toyota, color: .Silver, numberOfDoors: 4, fuel: .init(fuelCapacity: 60, fuelConsumptionPer100Km: 9.2)),
    Car(brand: .Chevrolet, color: .White, numberOfDoors: 4, fuel: .init(fuelCapacity: 52, fuelConsumptionPer100Km: 7.47)),
    Car(brand: .MercedesBenz, color: .Red, numberOfDoors: 2, fuel: .init(fuelCapacity: 79, fuelConsumptionPer100Km: 10.4)),
    Car(brand: .Hyundai, color: .Black, numberOfDoors: 2, fuel: .init(fuelCapacity: 57, fuelConsumptionPer100Km: 7.3)),
    Car(brand: .Toyota, color: .White, numberOfDoors: 4, fuel: .init(fuelCapacity: 90, fuelConsumptionPer100Km: 16.7)),
    Car(brand: .MercedesBenz, color: .White, numberOfDoors: 4, fuel: .init(fuelCapacity: 112, fuelConsumptionPer100Km: 15)),
    Car(brand: .Chevrolet, color: .Silver, numberOfDoors: 2, fuel: .init(fuelCapacity: 47, fuelConsumptionPer100Km: 6.7)),
    Car(brand: .BMW, color: .Red, numberOfDoors: 4, fuel: .init(fuelCapacity: 69, fuelConsumptionPer100Km: 8.7)),
    Car(brand: .MercedesBenz, color: .Silver, numberOfDoors: 4, fuel: .init(fuelCapacity: 78, fuelConsumptionPer100Km: 14)),
    Car(brand: .Hyundai, color: .Black, numberOfDoors: 2, fuel: .init(fuelCapacity: 56, fuelConsumptionPer100Km: 6.5)),
    Car(brand: .Chevrolet, color: .Black, numberOfDoors: 4, fuel: .init(fuelCapacity: 54, fuelConsumptionPer100Km: 7.27)),
    Car(brand: .MercedesBenz, color: .Black, numberOfDoors: 2, fuel: .init(fuelCapacity: 57, fuelConsumptionPer100Km: 7.55))
]

carsArray.count

// MARK: - Problems

// 1. ·Éò·Éû·Éù·Éï·Éî·Éó ·Éõ·Éê·Éú·É•·Éê·Éú·Éê, ·É†·Éù·Éõ·Éî·Éö·Éò·É™ ·Éß·Éï·Éî·Éö·Éê·Éñ·Éî ·É™·Éù·É¢·Éê·É° ·É¨·Éï·Éê·Éï·É°
print("1")
let carsSortedByFuelConsumption = carsArray.sorted (by: { $0.fuel.fuelConsumptionPer100Km < $1.fuel.fuelConsumptionPer100Km})
print("Most Fuel-Efficient Car - \(carsSortedByFuelConsumption[0].toString())")



// 2. ·Éì·Éê·Éê·ÉØ·Éí·É£·É§·Éî·Éó ·Éõ·Éê·Éú·É•·Éê·Éú·Éî·Éë·Éò ·Éë·É†·Éî·Éú·Éì·Éî·Éë·Éò·É° ·Éõ·Éò·ÉÆ·Éî·Éì·Éï·Éò·Éó
print("2")
var brandsGroup = [String:[Car]]()

Brand.allCases.forEach { element in
    brandsGroup[element.rawValue] = carsArray.filter({$0.brand == element})
}

brandsGroup.forEach { key, value in
    print("\(key): \(value.map({$0.toString()}))")
}f


// 3. ·Éì·Éê·Éê·Éö·Éê·Éí·Éî·Éó ·Éõ·Éê·Éú·É•·Éê·Éú·Éî·Éë·Éò ·Éô·Éê·É†·Éî·Éë·Éò·É° ·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éò·É° ·Éõ·Éò·ÉÆ·Éî·Éì·Éï·Éò·Éó
print("3")
let carsSortedByNumberofDoors = carsArray.sorted(by: { $0.numberOfDoors > $1.numberOfDoors})
print(carsSortedByNumberofDoors.map({$0.toString()}))

// 4. ·Éò·Éû·Éù·Éï·Éî·Éó ·Éò·É° ·Éõ·Éê·Éú·É•·Éê·Éú·Éê, ·É†·Éù·Éõ·Éö·Éò·É™ ·Éî·É†·Éó·Éò ·Éõ·Éó·Éö·Éò·Éê·Éú·Éê·Éì ·É°·Éê·Éï·Éñ·Éî ·Éê·Éï·Éñ·Éò·Éó ·Éß·Éï·Éî·Éö·Éê·Éñ·Éî ·Éõ·Éî·É¢·Éò ·Éõ·Éê·Éú·É´·Éò·Éö·Éò·É° ·Éí·Éê·Éï·Éö·Éê·É° ·É®·Éî·É´·Éö·Éî·Éë·É°
print("4")
let sortedCars = carsArray.sorted( by: { $0.fuel.fuelCapacity * 100 / $0.fuel.fuelConsumptionPer100Km > $1.fuel.fuelCapacity * 100 / $1.fuel.fuelConsumptionPer100Km })

print("\(sortedCars[0].toString()), Kilometers covered on a full tank of fuel: \(sortedCars[0].fuel.fuelCapacity * 100 / sortedCars[0].fuel.fuelConsumptionPer100Km)" )

// 5. ·Éß·Éï·Éî·Éö·Éê·Éñ·Éî ·Éõ·Éî·É¢·Éò ·É†·Éù·Éõ·Éî·Éö·Éò ·É§·Éî·É†·Éò·É° ·Éõ·Éê·Éú·É•·Éê·Éú·Éê ·Éê·É†·Éò·É° ·Éõ·Éê·É°·Éò·Éï·É®·Éò
print("5")
var colorsCount = [String:Int]()

Color.allCases.forEach { element in
    colorsCount[element.rawValue] = carsArray.filter( { $0.color == element}).count
}

let colorResult = colorsCount.sorted(by: { $0.value > $1.value} ).first!
print( "Most occured color is \(colorResult.key) (occures \(colorResult.value) times)")


/* 6. ·Éò·Éû·Éù·Éï·Éî·Éó ·Éò·É° ·Éë·É†·Éî·Éú·Éì·Éò, ·É†·Éù·Éõ·Éî·Éö·É°·Éê·É™ ·É°·Éê·É®·É£·Éê·Éö·Éù ·É°·Éê·É¨·Éï·Éê·Éï·Éò·É° ·ÉÆ·Éê·É†·ÉØ·Éò ·Éß·Éï·Éî·Éö·Éê·Éñ·Éî ·É™·Éù·É¢·Éê ·Éê·É•·Éï·É°
 (·Éõ·Éê·Éí·Éê·Éö·Éò·Éó·Éê·Éì ·Éó·É£ ·Éõ·Éê·É°·Éò·Éï·É®·Éò ·Éê·É†·Éò·É° ‚Äú·Éê‚Äù ·Éë·É†·Éî·Éú·Éì·Éò-·Éò·É° 2 ·Éõ·Éê·Éú·É•·Éê·Éú·Éê ‚Äú·Éê‚Äù ·Éë·É†·Éî·Éú·Éì·Éò·É° ·É°·Éê·É®·Éò·Éê·Éö·Éù ·ÉÆ·Éê·É†·ÉØ·Éò ·Éò·É•·Éú·Éî·Éë·Éê ·Éê·Éõ ·Éõ·Éê·Éú·É•·Éê·Éú·Éî·Éë·Éò·É° ·ÉÆ·Éê·É†·ÉØ·Éò·É° ·ÉØ·Éê·Éõ·Éò ·Éí·Éê·Éß·Éù·É§·Éò·Éö·Éò 2-·Éñ·Éî)
 */
print("6")

func fuelExpenses(carsArray: [Car]) -> [String?:Double] {
    return  [carsArray.first?.brand.rawValue:  carsArray.reduce(0) { partialResult, fuelConsumption in
        fuelConsumption.fuel.fuelConsumptionPer100Km } / Double(carsArray.count)]
}

var fuelExpensesAverageArray = [[String?:Double]]()
brandsGroup.forEach { key, value in
    fuelExpensesAverageArray.append(fuelExpenses(carsArray: value))
}

let averageFuelResult = fuelExpensesAverageArray.flatMap({ $0 }).sorted(by: { $0.value < $1.value})
print("\(averageFuelResult[0].key!) has a minimum average fuel expense")





